
project-lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c54  08002c54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c54  08002c54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08002c68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002c68  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca60  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb5  00000000  00000000  0002ca95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a1b  00000000  00000000  0002fde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d19c  00000000  00000000  00046803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845cf  00000000  00000000  0005399f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7f6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003280  00000000  00000000  000d7fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c00 	.word	0x08002c00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c00 	.word	0x08002c00

0800014c <SCH_Update>:
} sTask;

sTask SCH_Tasks[MAX_TASKS];
uint32_t taskCounter = 0;  // Bộ đếm ID task

void SCH_Update(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_TASKS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e042      	b.n	80001de <SCH_Update+0x92>
        if (SCH_Tasks[i].pFunction) {
 8000158:	4a25      	ldr	r2, [pc, #148]	; (80001f0 <SCH_Update+0xa4>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	011b      	lsls	r3, r3, #4
 800015e:	4413      	add	r3, r2
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d038      	beq.n	80001d8 <SCH_Update+0x8c>
            if (SCH_Tasks[i].delay == 0) {
 8000166:	4a22      	ldr	r2, [pc, #136]	; (80001f0 <SCH_Update+0xa4>)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	011b      	lsls	r3, r3, #4
 800016c:	4413      	add	r3, r2
 800016e:	3304      	adds	r3, #4
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d123      	bne.n	80001be <SCH_Update+0x72>
                // Khi delay đã hết, đặt cờ để chạy task
                SCH_Tasks[i].runMe += 1;
 8000176:	4a1e      	ldr	r2, [pc, #120]	; (80001f0 <SCH_Update+0xa4>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	011b      	lsls	r3, r3, #4
 800017c:	4413      	add	r3, r2
 800017e:	330c      	adds	r3, #12
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	3301      	adds	r3, #1
 8000184:	b2d9      	uxtb	r1, r3
 8000186:	4a1a      	ldr	r2, [pc, #104]	; (80001f0 <SCH_Update+0xa4>)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	011b      	lsls	r3, r3, #4
 800018c:	4413      	add	r3, r2
 800018e:	330c      	adds	r3, #12
 8000190:	460a      	mov	r2, r1
 8000192:	701a      	strb	r2, [r3, #0]

                // Đặt lại delay cho task nếu nó có chu kỳ lặp
                if (SCH_Tasks[i].period) {
 8000194:	4a16      	ldr	r2, [pc, #88]	; (80001f0 <SCH_Update+0xa4>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	011b      	lsls	r3, r3, #4
 800019a:	4413      	add	r3, r2
 800019c:	3308      	adds	r3, #8
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d019      	beq.n	80001d8 <SCH_Update+0x8c>
                    SCH_Tasks[i].delay = SCH_Tasks[i].period;
 80001a4:	4a12      	ldr	r2, [pc, #72]	; (80001f0 <SCH_Update+0xa4>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	011b      	lsls	r3, r3, #4
 80001aa:	4413      	add	r3, r2
 80001ac:	3308      	adds	r3, #8
 80001ae:	681a      	ldr	r2, [r3, #0]
 80001b0:	490f      	ldr	r1, [pc, #60]	; (80001f0 <SCH_Update+0xa4>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	011b      	lsls	r3, r3, #4
 80001b6:	440b      	add	r3, r1
 80001b8:	3304      	adds	r3, #4
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	e00c      	b.n	80001d8 <SCH_Update+0x8c>
                }
            } else {
                // Giảm delay của task
                SCH_Tasks[i].delay--;
 80001be:	4a0c      	ldr	r2, [pc, #48]	; (80001f0 <SCH_Update+0xa4>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	011b      	lsls	r3, r3, #4
 80001c4:	4413      	add	r3, r2
 80001c6:	3304      	adds	r3, #4
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	1e5a      	subs	r2, r3, #1
 80001cc:	4908      	ldr	r1, [pc, #32]	; (80001f0 <SCH_Update+0xa4>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	011b      	lsls	r3, r3, #4
 80001d2:	440b      	add	r3, r1
 80001d4:	3304      	adds	r3, #4
 80001d6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_TASKS; i++) {
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3301      	adds	r3, #1
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b09      	cmp	r3, #9
 80001e2:	ddb9      	ble.n	8000158 <SCH_Update+0xc>
            }
        }
    }
}
 80001e4:	bf00      	nop
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	20000030 	.word	0x20000030

080001f4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_TASKS; i++) {
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	e02b      	b.n	8000258 <SCH_Dispatch_Tasks+0x64>
        if (SCH_Tasks[i].runMe > 0) {
 8000200:	4a19      	ldr	r2, [pc, #100]	; (8000268 <SCH_Dispatch_Tasks+0x74>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	011b      	lsls	r3, r3, #4
 8000206:	4413      	add	r3, r2
 8000208:	330c      	adds	r3, #12
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d020      	beq.n	8000252 <SCH_Dispatch_Tasks+0x5e>
            (*SCH_Tasks[i].pFunction)();  // Chạy task
 8000210:	4a15      	ldr	r2, [pc, #84]	; (8000268 <SCH_Dispatch_Tasks+0x74>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	011b      	lsls	r3, r3, #4
 8000216:	4413      	add	r3, r2
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4798      	blx	r3
            SCH_Tasks[i].runMe -= 1;
 800021c:	4a12      	ldr	r2, [pc, #72]	; (8000268 <SCH_Dispatch_Tasks+0x74>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	011b      	lsls	r3, r3, #4
 8000222:	4413      	add	r3, r2
 8000224:	330c      	adds	r3, #12
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	b2d9      	uxtb	r1, r3
 800022c:	4a0e      	ldr	r2, [pc, #56]	; (8000268 <SCH_Dispatch_Tasks+0x74>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	011b      	lsls	r3, r3, #4
 8000232:	4413      	add	r3, r2
 8000234:	330c      	adds	r3, #12
 8000236:	460a      	mov	r2, r1
 8000238:	701a      	strb	r2, [r3, #0]

            // Nếu task không có chu kỳ (chỉ chạy 1 lần), xóa task khỏi hàng đợi
            if (SCH_Tasks[i].period == 0) {
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <SCH_Dispatch_Tasks+0x74>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	011b      	lsls	r3, r3, #4
 8000240:	4413      	add	r3, r2
 8000242:	3308      	adds	r3, #8
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d103      	bne.n	8000252 <SCH_Dispatch_Tasks+0x5e>
                SCH_Delete_Task(i);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f849 	bl	80002e4 <SCH_Delete_Task>
    for (int i = 0; i < MAX_TASKS; i++) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3301      	adds	r3, #1
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b09      	cmp	r3, #9
 800025c:	ddd0      	ble.n	8000200 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000030 	.word	0x20000030

0800026c <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 800026c:	b480      	push	{r7}
 800026e:	b087      	sub	sp, #28
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < MAX_TASKS; i++) {
 8000278:	2300      	movs	r3, #0
 800027a:	617b      	str	r3, [r7, #20]
 800027c:	e026      	b.n	80002cc <SCH_Add_Task+0x60>
        if (!SCH_Tasks[i].pFunction) {  // Tìm vị trí trống
 800027e:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <SCH_Add_Task+0x74>)
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	011b      	lsls	r3, r3, #4
 8000284:	4413      	add	r3, r2
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d11c      	bne.n	80002c6 <SCH_Add_Task+0x5a>
            SCH_Tasks[i].pFunction = pFunction;
 800028c:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <SCH_Add_Task+0x74>)
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	011b      	lsls	r3, r3, #4
 8000292:	4413      	add	r3, r2
 8000294:	68fa      	ldr	r2, [r7, #12]
 8000296:	601a      	str	r2, [r3, #0]
            SCH_Tasks[i].delay = DELAY;
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <SCH_Add_Task+0x74>)
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	011b      	lsls	r3, r3, #4
 800029e:	4413      	add	r3, r2
 80002a0:	3304      	adds	r3, #4
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	601a      	str	r2, [r3, #0]
            SCH_Tasks[i].period = PERIOD;
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <SCH_Add_Task+0x74>)
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	4413      	add	r3, r2
 80002ae:	3308      	adds	r3, #8
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	601a      	str	r2, [r3, #0]
            SCH_Tasks[i].runMe = 0;
 80002b4:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <SCH_Add_Task+0x74>)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	4413      	add	r3, r2
 80002bc:	330c      	adds	r3, #12
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]

            return i;  // Trả về ID của task
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	e006      	b.n	80002d4 <SCH_Add_Task+0x68>
    for (int i = 0; i < MAX_TASKS; i++) {
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	3301      	adds	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	2b09      	cmp	r3, #9
 80002d0:	ddd5      	ble.n	800027e <SCH_Add_Task+0x12>
        }
    }
    return MAX_TASKS;  // Hàng đợi đầy
 80002d2:	230a      	movs	r3, #10
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	371c      	adds	r7, #28
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000030 	.word	0x20000030

080002e4 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID) {
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
    if (taskID < MAX_TASKS && SCH_Tasks[taskID].pFunction) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b09      	cmp	r3, #9
 80002f0:	d823      	bhi.n	800033a <SCH_Delete_Task+0x56>
 80002f2:	4a15      	ldr	r2, [pc, #84]	; (8000348 <SCH_Delete_Task+0x64>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	011b      	lsls	r3, r3, #4
 80002f8:	4413      	add	r3, r2
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d01c      	beq.n	800033a <SCH_Delete_Task+0x56>
        SCH_Tasks[taskID].pFunction = NULL;
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <SCH_Delete_Task+0x64>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	011b      	lsls	r3, r3, #4
 8000306:	4413      	add	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
        SCH_Tasks[taskID].delay = 0;
 800030c:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <SCH_Delete_Task+0x64>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	011b      	lsls	r3, r3, #4
 8000312:	4413      	add	r3, r2
 8000314:	3304      	adds	r3, #4
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
        SCH_Tasks[taskID].period = 0;
 800031a:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <SCH_Delete_Task+0x64>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	011b      	lsls	r3, r3, #4
 8000320:	4413      	add	r3, r2
 8000322:	3308      	adds	r3, #8
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
        SCH_Tasks[taskID].runMe = 0;
 8000328:	4a07      	ldr	r2, [pc, #28]	; (8000348 <SCH_Delete_Task+0x64>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	011b      	lsls	r3, r3, #4
 800032e:	4413      	add	r3, r2
 8000330:	330c      	adds	r3, #12
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
        return 1;  // Xóa thành công
 8000336:	2301      	movs	r3, #1
 8000338:	e000      	b.n	800033c <SCH_Delete_Task+0x58>
    }
    return 0;  // Không thành công
 800033a:	2300      	movs	r3, #0
}
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000030 	.word	0x20000030

0800034c <blink>:
void SystemClock_Config(void);
static void MX_TIM2_Init(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void blink(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
 8000350:	2120      	movs	r1, #32
 8000352:	4802      	ldr	r0, [pc, #8]	; (800035c <blink+0x10>)
 8000354:	f000 fe08 	bl	8000f68 <HAL_GPIO_TogglePin>
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40010800 	.word	0x40010800

08000360 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
uint8_t hello[] = "Hello World!";
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2 ){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a08      	ldr	r2, [pc, #32]	; (8000390 <HAL_UART_RxCpltCallback+0x30>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d10a      	bne.n	8000388 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit (& huart2 , &temp , 1, 50);
 8000372:	2332      	movs	r3, #50	; 0x32
 8000374:	2201      	movs	r2, #1
 8000376:	4907      	ldr	r1, [pc, #28]	; (8000394 <HAL_UART_RxCpltCallback+0x34>)
 8000378:	4807      	ldr	r0, [pc, #28]	; (8000398 <HAL_UART_RxCpltCallback+0x38>)
 800037a:	f001 fdfb 	bl	8001f74 <HAL_UART_Transmit>
		HAL_UART_Receive_IT (& huart2 , &temp , 1);
 800037e:	2201      	movs	r2, #1
 8000380:	4904      	ldr	r1, [pc, #16]	; (8000394 <HAL_UART_RxCpltCallback+0x34>)
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <HAL_UART_RxCpltCallback+0x38>)
 8000384:	f001 fe81 	bl	800208a <HAL_UART_Receive_IT>
	}
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40004400 	.word	0x40004400
 8000394:	20000028 	.word	0x20000028
 8000398:	20000118 	.word	0x20000118

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 fa2d 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f827 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80003aa:	f000 f861 	bl	8000470 <MX_TIM2_Init>
  MX_GPIO_Init();
 80003ae:	f000 f8d5 	bl	800055c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003b2:	f000 f8a9 	bl	8000508 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &temp,1);
 80003b6:	2201      	movs	r2, #1
 80003b8:	490b      	ldr	r1, [pc, #44]	; (80003e8 <main+0x4c>)
 80003ba:	480c      	ldr	r0, [pc, #48]	; (80003ec <main+0x50>)
 80003bc:	f001 fe65 	bl	800208a <HAL_UART_Receive_IT>
  uint8_t hello[] = "Hello World!";
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <main+0x54>)
 80003c2:	463c      	mov	r4, r7
 80003c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003c6:	c407      	stmia	r4!, {r0, r1, r2}
 80003c8:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, hello, sizeof(hello) - 1, 50);
 80003ca:	4639      	mov	r1, r7
 80003cc:	2332      	movs	r3, #50	; 0x32
 80003ce:	220c      	movs	r2, #12
 80003d0:	4806      	ldr	r0, [pc, #24]	; (80003ec <main+0x50>)
 80003d2:	f001 fdcf 	bl	8001f74 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(blink, 100, 100);
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	2164      	movs	r1, #100	; 0x64
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <main+0x58>)
 80003dc:	f7ff ff46 	bl	800026c <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80003e0:	f7ff ff08 	bl	80001f4 <SCH_Dispatch_Tasks>
 80003e4:	e7fc      	b.n	80003e0 <main+0x44>
 80003e6:	bf00      	nop
 80003e8:	20000028 	.word	0x20000028
 80003ec:	20000118 	.word	0x20000118
 80003f0:	08002c18 	.word	0x08002c18
 80003f4:	0800034d 	.word	0x0800034d

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b090      	sub	sp, #64	; 0x40
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fbf2 	bl	8002bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041a:	2302      	movs	r3, #2
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000422:	2310      	movs	r3, #16
 8000424:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000426:	2300      	movs	r3, #0
 8000428:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0318 	add.w	r3, r7, #24
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fdb4 	bl	8000f9c <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800043a:	f000 f8cb 	bl	80005d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f001 f820 	bl	800149c <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000462:	f000 f8b7 	bl	80005d4 <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3740      	adds	r7, #64	; 0x40
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000484:	463b      	mov	r3, r7
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <MX_TIM2_Init+0x94>)
 800048e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000492:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_TIM2_Init+0x94>)
 8000496:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800049a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <MX_TIM2_Init+0x94>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_TIM2_Init+0x94>)
 80004a4:	2209      	movs	r2, #9
 80004a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a8:	4b16      	ldr	r3, [pc, #88]	; (8000504 <MX_TIM2_Init+0x94>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_TIM2_Init+0x94>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004b4:	4813      	ldr	r0, [pc, #76]	; (8000504 <MX_TIM2_Init+0x94>)
 80004b6:	f001 f97f 	bl	80017b8 <HAL_TIM_Base_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004c0:	f000 f888 	bl	80005d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	4619      	mov	r1, r3
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <MX_TIM2_Init+0x94>)
 80004d2:	f001 fab0 	bl	8001a36 <HAL_TIM_ConfigClockSource>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004dc:	f000 f87a 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2300      	movs	r3, #0
 80004e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e8:	463b      	mov	r3, r7
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_TIM2_Init+0x94>)
 80004ee:	f001 fc87 	bl	8001e00 <HAL_TIMEx_MasterConfigSynchronization>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004f8:	f000 f86c 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200000d0 	.word	0x200000d0

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800050e:	4a12      	ldr	r2, [pc, #72]	; (8000558 <MX_USART2_UART_Init+0x50>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000514:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000540:	f001 fcc8 	bl	8001ed4 <HAL_UART_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800054a:	f000 f843 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000118 	.word	0x20000118
 8000558:	40004400 	.word	0x40004400

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_GPIO_Init+0x5c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <MX_GPIO_Init+0x5c>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_GPIO_Init+0x5c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0304 	and.w	r3, r3, #4
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD0_GPIO_Port, LD0_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2120      	movs	r1, #32
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <MX_GPIO_Init+0x60>)
 800058e:	f000 fcd3 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD0_Pin */
  GPIO_InitStruct.Pin = LD0_Pin;
 8000592:	2320      	movs	r3, #32
 8000594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2302      	movs	r3, #2
 80005a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD0_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4619      	mov	r1, r3
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_GPIO_Init+0x60>)
 80005aa:	f000 fb4b 	bl	8000c44 <HAL_GPIO_Init>

}
 80005ae:	bf00      	nop
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010800 	.word	0x40010800

080005c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80005c8:	f7ff fdc0 	bl	800014c <SCH_Update>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	e7fe      	b.n	80005dc <Error_Handler+0x8>
	...

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_MspInit+0x5c>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_MspInit+0x5c>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_MspInit+0x5c>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <HAL_MspInit+0x5c>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <HAL_MspInit+0x5c>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	61d3      	str	r3, [r2, #28]
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <HAL_MspInit+0x5c>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_MspInit+0x60>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <HAL_MspInit+0x60>)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000
 8000640:	40010000 	.word	0x40010000

08000644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000654:	d113      	bne.n	800067e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_TIM_Base_MspInit+0x44>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <HAL_TIM_Base_MspInit+0x44>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_TIM_Base_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	201c      	movs	r0, #28
 8000674:	f000 f9fd 	bl	8000a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000678:	201c      	movs	r0, #28
 800067a:	f000 fa16 	bl	8000aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <HAL_UART_MspInit+0x98>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d137      	bne.n	800071c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <HAL_UART_MspInit+0x9c>)
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <HAL_UART_MspInit+0x9c>)
 80006b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b6:	61d3      	str	r3, [r2, #28]
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_UART_MspInit+0x9c>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_UART_MspInit+0x9c>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_UART_MspInit+0x9c>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_MspInit+0x9c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006dc:	2304      	movs	r3, #4
 80006de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4619      	mov	r1, r3
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <HAL_UART_MspInit+0xa0>)
 80006f0:	f000 faa8 	bl	8000c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006f4:	2308      	movs	r3, #8
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <HAL_UART_MspInit+0xa0>)
 8000708:	f000 fa9c 	bl	8000c44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	2026      	movs	r0, #38	; 0x26
 8000712:	f000 f9ae 	bl	8000a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000716:	2026      	movs	r0, #38	; 0x26
 8000718:	f000 f9c7 	bl	8000aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40004400 	.word	0x40004400
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 f889 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <TIM2_IRQHandler+0x10>)
 8000786:	f001 f866 	bl	8001856 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000d0 	.word	0x200000d0

08000794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <USART2_IRQHandler+0x10>)
 800079a:	f001 fc9b 	bl	80020d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000118 	.word	0x20000118

080007a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b4:	f7ff fff8 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ba:	490c      	ldr	r1, [pc, #48]	; (80007ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007d0:	4c09      	ldr	r4, [pc, #36]	; (80007f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007de:	f002 f9e3 	bl	8002ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fddb 	bl	800039c <main>
  bx lr
 80007e6:	4770      	bx	lr
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f0:	08002c5c 	.word	0x08002c5c
  ldr r2, =_sbss
 80007f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f8:	20000164 	.word	0x20000164

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x28>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x28>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f923 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff fee0 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f93b 	bl	8000ac6 <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f903 	bl	8000a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x1c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x20>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a03      	ldr	r2, [pc, #12]	; (80008ac <HAL_IncTick+0x20>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000160 	.word	0x20000160

080008b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <HAL_GetTick+0x10>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	20000160 	.word	0x20000160

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	db0b      	blt.n	8000952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 021f 	and.w	r2, r3, #31
 8000940:	4906      	ldr	r1, [pc, #24]	; (800095c <__NVIC_EnableIRQ+0x34>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	2001      	movs	r0, #1
 800094a:	fa00 f202 	lsl.w	r2, r0, r2
 800094e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100

08000960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db0a      	blt.n	800098a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <__NVIC_SetPriority+0x4c>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	440b      	add	r3, r1
 8000984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000988:	e00a      	b.n	80009a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4908      	ldr	r1, [pc, #32]	; (80009b0 <__NVIC_SetPriority+0x50>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	3b04      	subs	r3, #4
 8000998:	0112      	lsls	r2, r2, #4
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	440b      	add	r3, r1
 800099e:	761a      	strb	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f1c3 0307 	rsb	r3, r3, #7
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	bf28      	it	cs
 80009d2:	2304      	movcs	r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3304      	adds	r3, #4
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d902      	bls.n	80009e4 <NVIC_EncodePriority+0x30>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3b03      	subs	r3, #3
 80009e2:	e000      	b.n	80009e6 <NVIC_EncodePriority+0x32>
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43da      	mvns	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	401a      	ands	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43d9      	mvns	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	4313      	orrs	r3, r2
         );
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a28:	d301      	bcc.n	8000a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00f      	b.n	8000a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <SysTick_Config+0x40>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a36:	210f      	movs	r1, #15
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f7ff ff90 	bl	8000960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SysTick_Config+0x40>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SysTick_Config+0x40>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff2d 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff42 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff90 	bl	80009b4 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff5f 	bl	8000960 <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff35 	bl	8000928 <__NVIC_EnableIRQ>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ffa2 	bl	8000a18 <SysTick_Config>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d008      	beq.n	8000b08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2204      	movs	r2, #4
 8000afa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e020      	b.n	8000b4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 020e 	bic.w	r2, r2, #14
 8000b16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 0201 	bic.w	r2, r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b30:	2101      	movs	r1, #1
 8000b32:	fa01 f202 	lsl.w	r2, r1, r2
 8000b36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d005      	beq.n	8000b78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2204      	movs	r2, #4
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e051      	b.n	8000c1c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 020e 	bic.w	r2, r2, #14
 8000b86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f022 0201 	bic.w	r2, r2, #1
 8000b96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <HAL_DMA_Abort_IT+0xd4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d029      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0xa2>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <HAL_DMA_Abort_IT+0xd8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d022      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0x9e>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <HAL_DMA_Abort_IT+0xdc>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d01a      	beq.n	8000bec <HAL_DMA_Abort_IT+0x98>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <HAL_DMA_Abort_IT+0xe0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d012      	beq.n	8000be6 <HAL_DMA_Abort_IT+0x92>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <HAL_DMA_Abort_IT+0xe4>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d00a      	beq.n	8000be0 <HAL_DMA_Abort_IT+0x8c>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <HAL_DMA_Abort_IT+0xe8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d102      	bne.n	8000bda <HAL_DMA_Abort_IT+0x86>
 8000bd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bd8:	e00e      	b.n	8000bf8 <HAL_DMA_Abort_IT+0xa4>
 8000bda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bde:	e00b      	b.n	8000bf8 <HAL_DMA_Abort_IT+0xa4>
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	e008      	b.n	8000bf8 <HAL_DMA_Abort_IT+0xa4>
 8000be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bea:	e005      	b.n	8000bf8 <HAL_DMA_Abort_IT+0xa4>
 8000bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf0:	e002      	b.n	8000bf8 <HAL_DMA_Abort_IT+0xa4>
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	e000      	b.n	8000bf8 <HAL_DMA_Abort_IT+0xa4>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_DMA_Abort_IT+0xec>)
 8000bfa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	4798      	blx	r3
    } 
  }
  return status;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40020008 	.word	0x40020008
 8000c2c:	4002001c 	.word	0x4002001c
 8000c30:	40020030 	.word	0x40020030
 8000c34:	40020044 	.word	0x40020044
 8000c38:	40020058 	.word	0x40020058
 8000c3c:	4002006c 	.word	0x4002006c
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b08b      	sub	sp, #44	; 0x2c
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	e148      	b.n	8000eea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f040 8137 	bne.w	8000ee4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4aa3      	ldr	r2, [pc, #652]	; (8000f08 <HAL_GPIO_Init+0x2c4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d05e      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000c80:	4aa1      	ldr	r2, [pc, #644]	; (8000f08 <HAL_GPIO_Init+0x2c4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d875      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000c86:	4aa1      	ldr	r2, [pc, #644]	; (8000f0c <HAL_GPIO_Init+0x2c8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d058      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000c8c:	4a9f      	ldr	r2, [pc, #636]	; (8000f0c <HAL_GPIO_Init+0x2c8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d86f      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000c92:	4a9f      	ldr	r2, [pc, #636]	; (8000f10 <HAL_GPIO_Init+0x2cc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d052      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000c98:	4a9d      	ldr	r2, [pc, #628]	; (8000f10 <HAL_GPIO_Init+0x2cc>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d869      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000c9e:	4a9d      	ldr	r2, [pc, #628]	; (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d04c      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000ca4:	4a9b      	ldr	r2, [pc, #620]	; (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d863      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000caa:	4a9b      	ldr	r2, [pc, #620]	; (8000f18 <HAL_GPIO_Init+0x2d4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d046      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000cb0:	4a99      	ldr	r2, [pc, #612]	; (8000f18 <HAL_GPIO_Init+0x2d4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d85d      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d82a      	bhi.n	8000d10 <HAL_GPIO_Init+0xcc>
 8000cba:	2b12      	cmp	r3, #18
 8000cbc:	d859      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000cbe:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <HAL_GPIO_Init+0x80>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000d3f 	.word	0x08000d3f
 8000cc8:	08000d19 	.word	0x08000d19
 8000ccc:	08000d2b 	.word	0x08000d2b
 8000cd0:	08000d6d 	.word	0x08000d6d
 8000cd4:	08000d73 	.word	0x08000d73
 8000cd8:	08000d73 	.word	0x08000d73
 8000cdc:	08000d73 	.word	0x08000d73
 8000ce0:	08000d73 	.word	0x08000d73
 8000ce4:	08000d73 	.word	0x08000d73
 8000ce8:	08000d73 	.word	0x08000d73
 8000cec:	08000d73 	.word	0x08000d73
 8000cf0:	08000d73 	.word	0x08000d73
 8000cf4:	08000d73 	.word	0x08000d73
 8000cf8:	08000d73 	.word	0x08000d73
 8000cfc:	08000d73 	.word	0x08000d73
 8000d00:	08000d73 	.word	0x08000d73
 8000d04:	08000d73 	.word	0x08000d73
 8000d08:	08000d21 	.word	0x08000d21
 8000d0c:	08000d35 	.word	0x08000d35
 8000d10:	4a82      	ldr	r2, [pc, #520]	; (8000f1c <HAL_GPIO_Init+0x2d8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d013      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d16:	e02c      	b.n	8000d72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	623b      	str	r3, [r7, #32]
          break;
 8000d1e:	e029      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	3304      	adds	r3, #4
 8000d26:	623b      	str	r3, [r7, #32]
          break;
 8000d28:	e024      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	3308      	adds	r3, #8
 8000d30:	623b      	str	r3, [r7, #32]
          break;
 8000d32:	e01f      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	330c      	adds	r3, #12
 8000d3a:	623b      	str	r3, [r7, #32]
          break;
 8000d3c:	e01a      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d102      	bne.n	8000d4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d46:	2304      	movs	r3, #4
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e013      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d105      	bne.n	8000d60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d54:	2308      	movs	r3, #8
 8000d56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	611a      	str	r2, [r3, #16]
          break;
 8000d5e:	e009      	b.n	8000d74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d60:	2308      	movs	r3, #8
 8000d62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	615a      	str	r2, [r3, #20]
          break;
 8000d6a:	e003      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
          break;
 8000d70:	e000      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          break;
 8000d72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2bff      	cmp	r3, #255	; 0xff
 8000d78:	d801      	bhi.n	8000d7e <HAL_GPIO_Init+0x13a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	e001      	b.n	8000d82 <HAL_GPIO_Init+0x13e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3304      	adds	r3, #4
 8000d82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	2bff      	cmp	r3, #255	; 0xff
 8000d88:	d802      	bhi.n	8000d90 <HAL_GPIO_Init+0x14c>
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	e002      	b.n	8000d96 <HAL_GPIO_Init+0x152>
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	3b08      	subs	r3, #8
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	401a      	ands	r2, r3
 8000da8:	6a39      	ldr	r1, [r7, #32]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	431a      	orrs	r2, r3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 8090 	beq.w	8000ee4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc4:	4b56      	ldr	r3, [pc, #344]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a55      	ldr	r2, [pc, #340]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b53      	ldr	r3, [pc, #332]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ddc:	4a51      	ldr	r2, [pc, #324]	; (8000f24 <HAL_GPIO_Init+0x2e0>)
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	3302      	adds	r3, #2
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	220f      	movs	r2, #15
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a49      	ldr	r2, [pc, #292]	; (8000f28 <HAL_GPIO_Init+0x2e4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d00d      	beq.n	8000e24 <HAL_GPIO_Init+0x1e0>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <HAL_GPIO_Init+0x2e8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x1dc>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a47      	ldr	r2, [pc, #284]	; (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d101      	bne.n	8000e1c <HAL_GPIO_Init+0x1d8>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e004      	b.n	8000e26 <HAL_GPIO_Init+0x1e2>
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e002      	b.n	8000e26 <HAL_GPIO_Init+0x1e2>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <HAL_GPIO_Init+0x1e2>
 8000e24:	2300      	movs	r3, #0
 8000e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e28:	f002 0203 	and.w	r2, r2, #3
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	4093      	lsls	r3, r2
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e36:	493b      	ldr	r1, [pc, #236]	; (8000f24 <HAL_GPIO_Init+0x2e0>)
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e50:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	4937      	ldr	r1, [pc, #220]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	608b      	str	r3, [r1, #8]
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5e:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4933      	ldr	r1, [pc, #204]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	492d      	ldr	r1, [pc, #180]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60cb      	str	r3, [r1, #12]
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4929      	ldr	r1, [pc, #164]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	4923      	ldr	r1, [pc, #140]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	491f      	ldr	r1, [pc, #124]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4919      	ldr	r1, [pc, #100]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	600b      	str	r3, [r1, #0]
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4915      	ldr	r1, [pc, #84]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f47f aeaf 	bne.w	8000c58 <HAL_GPIO_Init+0x14>
  }
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	372c      	adds	r7, #44	; 0x2c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	10320000 	.word	0x10320000
 8000f0c:	10310000 	.word	0x10310000
 8000f10:	10220000 	.word	0x10220000
 8000f14:	10210000 	.word	0x10210000
 8000f18:	10120000 	.word	0x10120000
 8000f1c:	10110000 	.word	0x10110000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	40010c00 	.word	0x40010c00
 8000f30:	40011000 	.word	0x40011000
 8000f34:	40010400 	.word	0x40010400

08000f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f48:	787b      	ldrb	r3, [r7, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43d9      	mvns	r1, r3
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	400b      	ands	r3, r1
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	611a      	str	r2, [r3, #16]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e26c      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8087 	beq.w	80010ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fbc:	4b92      	ldr	r3, [pc, #584]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d00c      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc8:	4b8f      	ldr	r3, [pc, #572]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d112      	bne.n	8000ffa <HAL_RCC_OscConfig+0x5e>
 8000fd4:	4b8c      	ldr	r3, [pc, #560]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe0:	d10b      	bne.n	8000ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe2:	4b89      	ldr	r3, [pc, #548]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d06c      	beq.n	80010c8 <HAL_RCC_OscConfig+0x12c>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d168      	bne.n	80010c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e246      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001002:	d106      	bne.n	8001012 <HAL_RCC_OscConfig+0x76>
 8001004:	4b80      	ldr	r3, [pc, #512]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a7f      	ldr	r2, [pc, #508]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800100a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e02e      	b.n	8001070 <HAL_RCC_OscConfig+0xd4>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0x98>
 800101a:	4b7b      	ldr	r3, [pc, #492]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a7a      	ldr	r2, [pc, #488]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b78      	ldr	r3, [pc, #480]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a77      	ldr	r2, [pc, #476]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800102c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e01d      	b.n	8001070 <HAL_RCC_OscConfig+0xd4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0xbc>
 800103e:	4b72      	ldr	r3, [pc, #456]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a71      	ldr	r2, [pc, #452]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b6f      	ldr	r3, [pc, #444]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a6e      	ldr	r2, [pc, #440]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e00b      	b.n	8001070 <HAL_RCC_OscConfig+0xd4>
 8001058:	4b6b      	ldr	r3, [pc, #428]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a6a      	ldr	r2, [pc, #424]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800105e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b68      	ldr	r3, [pc, #416]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a67      	ldr	r2, [pc, #412]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800106a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc1a 	bl	80008b0 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fc16 	bl	80008b0 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1fa      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	4b5d      	ldr	r3, [pc, #372]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0xe4>
 800109e:	e014      	b.n	80010ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc06 	bl	80008b0 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fc02 	bl	80008b0 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e1e6      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ba:	4b53      	ldr	r3, [pc, #332]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x10c>
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d063      	beq.n	800119e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d6:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00b      	beq.n	80010fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010e2:	4b49      	ldr	r3, [pc, #292]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d11c      	bne.n	8001128 <HAL_RCC_OscConfig+0x18c>
 80010ee:	4b46      	ldr	r3, [pc, #280]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d116      	bne.n	8001128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	4b43      	ldr	r3, [pc, #268]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_RCC_OscConfig+0x176>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d001      	beq.n	8001112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e1ba      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4939      	ldr	r1, [pc, #228]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001122:	4313      	orrs	r3, r2
 8001124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	e03a      	b.n	800119e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_RCC_OscConfig+0x270>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fbbb 	bl	80008b0 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113e:	f7ff fbb7 	bl	80008b0 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e19b      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4927      	ldr	r1, [pc, #156]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
 8001170:	e015      	b.n	800119e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <HAL_RCC_OscConfig+0x270>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fb9a 	bl	80008b0 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001180:	f7ff fb96 	bl	80008b0 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e17a      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d03a      	beq.n	8001220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d019      	beq.n	80011e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_RCC_OscConfig+0x274>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b8:	f7ff fb7a 	bl	80008b0 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c0:	f7ff fb76 	bl	80008b0 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e15a      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011de:	2001      	movs	r0, #1
 80011e0:	f000 facc 	bl	800177c <RCC_Delay>
 80011e4:	e01c      	b.n	8001220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_RCC_OscConfig+0x274>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ec:	f7ff fb60 	bl	80008b0 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f2:	e00f      	b.n	8001214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f4:	f7ff fb5c 	bl	80008b0 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d908      	bls.n	8001214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e140      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000
 800120c:	42420000 	.word	0x42420000
 8001210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001214:	4b9e      	ldr	r3, [pc, #632]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1e9      	bne.n	80011f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80a6 	beq.w	800137a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001232:	4b97      	ldr	r3, [pc, #604]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10d      	bne.n	800125a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b94      	ldr	r3, [pc, #592]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a93      	ldr	r2, [pc, #588]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b91      	ldr	r3, [pc, #580]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001256:	2301      	movs	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	4b8e      	ldr	r3, [pc, #568]	; (8001494 <HAL_RCC_OscConfig+0x4f8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001266:	4b8b      	ldr	r3, [pc, #556]	; (8001494 <HAL_RCC_OscConfig+0x4f8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a8a      	ldr	r2, [pc, #552]	; (8001494 <HAL_RCC_OscConfig+0x4f8>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001272:	f7ff fb1d 	bl	80008b0 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127a:	f7ff fb19 	bl	80008b0 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0fd      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	4b81      	ldr	r3, [pc, #516]	; (8001494 <HAL_RCC_OscConfig+0x4f8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x312>
 80012a0:	4b7b      	ldr	r3, [pc, #492]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a7a      	ldr	r2, [pc, #488]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	e02d      	b.n	800130a <HAL_RCC_OscConfig+0x36e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x334>
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a75      	ldr	r2, [pc, #468]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	6213      	str	r3, [r2, #32]
 80012c2:	4b73      	ldr	r3, [pc, #460]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4a72      	ldr	r2, [pc, #456]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	6213      	str	r3, [r2, #32]
 80012ce:	e01c      	b.n	800130a <HAL_RCC_OscConfig+0x36e>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d10c      	bne.n	80012f2 <HAL_RCC_OscConfig+0x356>
 80012d8:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4a6c      	ldr	r2, [pc, #432]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6213      	str	r3, [r2, #32]
 80012e4:	4b6a      	ldr	r3, [pc, #424]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a69      	ldr	r2, [pc, #420]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6213      	str	r3, [r2, #32]
 80012f0:	e00b      	b.n	800130a <HAL_RCC_OscConfig+0x36e>
 80012f2:	4b67      	ldr	r3, [pc, #412]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a66      	ldr	r2, [pc, #408]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6213      	str	r3, [r2, #32]
 80012fe:	4b64      	ldr	r3, [pc, #400]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a63      	ldr	r2, [pc, #396]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001304:	f023 0304 	bic.w	r3, r3, #4
 8001308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d015      	beq.n	800133e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff facd 	bl	80008b0 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f7ff fac9 	bl	80008b0 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f241 3288 	movw	r2, #5000	; 0x1388
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0ab      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	4b57      	ldr	r3, [pc, #348]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0ee      	beq.n	800131a <HAL_RCC_OscConfig+0x37e>
 800133c:	e014      	b.n	8001368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fab7 	bl	80008b0 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fab3 	bl	80008b0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e095      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135c:	4b4c      	ldr	r3, [pc, #304]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ee      	bne.n	8001346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d105      	bne.n	800137a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a47      	ldr	r2, [pc, #284]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8081 	beq.w	8001486 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001384:	4b42      	ldr	r3, [pc, #264]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d061      	beq.n	8001454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d146      	bne.n	8001426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <HAL_RCC_OscConfig+0x4fc>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fa87 	bl	80008b0 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff fa83 	bl	80008b0 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e067      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b8:	4b35      	ldr	r3, [pc, #212]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f0      	bne.n	80013a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d108      	bne.n	80013e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	492d      	ldr	r1, [pc, #180]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a19      	ldr	r1, [r3, #32]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	430b      	orrs	r3, r1
 80013f2:	4927      	ldr	r1, [pc, #156]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_RCC_OscConfig+0x4fc>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fa57 	bl	80008b0 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff fa53 	bl	80008b0 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e037      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x46a>
 8001424:	e02f      	b.n	8001486 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_RCC_OscConfig+0x4fc>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fa40 	bl	80008b0 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fa3c 	bl	80008b0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e020      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x498>
 8001452:	e018      	b.n	8001486 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e013      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_OscConfig+0x4f4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	429a      	cmp	r2, r3
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	40007000 	.word	0x40007000
 8001498:	42420060 	.word	0x42420060

0800149c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0d0      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b0:	4b6a      	ldr	r3, [pc, #424]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d910      	bls.n	80014e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b67      	ldr	r3, [pc, #412]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4965      	ldr	r1, [pc, #404]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b63      	ldr	r3, [pc, #396]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0b8      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f8:	4b59      	ldr	r3, [pc, #356]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a58      	ldr	r2, [pc, #352]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001502:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001510:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a52      	ldr	r2, [pc, #328]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800151a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151c:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	494d      	ldr	r1, [pc, #308]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d040      	beq.n	80015bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d115      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e07f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e073      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156a:	4b3d      	ldr	r3, [pc, #244]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e06b      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157a:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f023 0203 	bic.w	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4936      	ldr	r1, [pc, #216]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800158c:	f7ff f990 	bl	80008b0 <HAL_GetTick>
 8001590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	e00a      	b.n	80015aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff f98c 	bl	80008b0 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e053      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 020c 	and.w	r2, r3, #12
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1eb      	bne.n	8001594 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d210      	bcs.n	80015ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 0207 	bic.w	r2, r3, #7
 80015d2:	4922      	ldr	r1, [pc, #136]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e032      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4916      	ldr	r1, [pc, #88]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d009      	beq.n	800162a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	490e      	ldr	r1, [pc, #56]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800162a:	f000 f821 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 800162e:	4602      	mov	r2, r0
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	490a      	ldr	r1, [pc, #40]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 800163c:	5ccb      	ldrb	r3, [r1, r3]
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <HAL_RCC_ClockConfig+0x1cc>)
 8001644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x1d0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f8ee 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000
 8001660:	40021000 	.word	0x40021000
 8001664:	08002c28 	.word	0x08002c28
 8001668:	20000000 	.word	0x20000000
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_GetSysClockFreq+0x94>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b04      	cmp	r3, #4
 8001698:	d002      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x30>
 800169a:	2b08      	cmp	r3, #8
 800169c:	d003      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0x36>
 800169e:	e027      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_RCC_GetSysClockFreq+0x98>)
 80016a2:	613b      	str	r3, [r7, #16]
      break;
 80016a4:	e027      	b.n	80016f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d010      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_RCC_GetSysClockFreq+0x94>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	0c5b      	lsrs	r3, r3, #17
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	4a11      	ldr	r2, [pc, #68]	; (8001710 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <HAL_RCC_GetSysClockFreq+0x98>)
 80016d2:	fb02 f203 	mul.w	r2, r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e004      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	613b      	str	r3, [r7, #16]
      break;
 80016ee:	e002      	b.n	80016f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetSysClockFreq+0x98>)
 80016f2:	613b      	str	r3, [r7, #16]
      break;
 80016f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016f6:	693b      	ldr	r3, [r7, #16]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	007a1200 	.word	0x007a1200
 800170c:	08002c40 	.word	0x08002c40
 8001710:	08002c50 	.word	0x08002c50
 8001714:	003d0900 	.word	0x003d0900

08001718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800171c:	4b02      	ldr	r3, [pc, #8]	; (8001728 <HAL_RCC_GetHCLKFreq+0x10>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000000 	.word	0x20000000

0800172c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001730:	f7ff fff2 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	0a1b      	lsrs	r3, r3, #8
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	4903      	ldr	r1, [pc, #12]	; (8001750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001742:	5ccb      	ldrb	r3, [r1, r3]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	08002c38 	.word	0x08002c38

08001754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001758:	f7ff ffde 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 800175c:	4602      	mov	r2, r0
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	0adb      	lsrs	r3, r3, #11
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	4903      	ldr	r1, [pc, #12]	; (8001778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800176a:	5ccb      	ldrb	r3, [r1, r3]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000
 8001778:	08002c38 	.word	0x08002c38

0800177c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <RCC_Delay+0x34>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <RCC_Delay+0x38>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0a5b      	lsrs	r3, r3, #9
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001798:	bf00      	nop
  }
  while (Delay --);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	60fa      	str	r2, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f9      	bne.n	8001798 <RCC_Delay+0x1c>
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	20000000 	.word	0x20000000
 80017b4:	10624dd3 	.word	0x10624dd3

080017b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e041      	b.n	800184e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7fe ff30 	bl	8000644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3304      	adds	r3, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f000 fa08 	bl	8001c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d01b      	beq.n	80018ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f06f 0202 	mvn.w	r2, #2
 800188a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f998 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
 80018a6:	e005      	b.n	80018b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f98b 	bl	8001bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f99a 	bl	8001be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d01b      	beq.n	8001906 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f06f 0204 	mvn.w	r2, #4
 80018d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f972 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
 80018f2:	e005      	b.n	8001900 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f965 	bl	8001bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f974 	bl	8001be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01b      	beq.n	8001952 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0208 	mvn.w	r2, #8
 8001922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2204      	movs	r2, #4
 8001928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f94c 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
 800193e:	e005      	b.n	800194c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f93f 	bl	8001bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f94e 	bl	8001be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01b      	beq.n	800199e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f06f 0210 	mvn.w	r2, #16
 800196e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2208      	movs	r2, #8
 8001974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f926 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
 800198a:	e005      	b.n	8001998 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f919 	bl	8001bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f928 	bl	8001be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00c      	beq.n	80019c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f06f 0201 	mvn.w	r2, #1
 80019ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7fe fdff 	bl	80005c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fa6e 	bl	8001ec2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00c      	beq.n	8001a0a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f8f8 	bl	8001bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00c      	beq.n	8001a2e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0220 	mvn.w	r2, #32
 8001a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 fa41 	bl	8001eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_TIM_ConfigClockSource+0x1c>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0b4      	b.n	8001bbc <HAL_TIM_ConfigClockSource+0x186>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a8a:	d03e      	beq.n	8001b0a <HAL_TIM_ConfigClockSource+0xd4>
 8001a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a90:	f200 8087 	bhi.w	8001ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8001a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a98:	f000 8086 	beq.w	8001ba8 <HAL_TIM_ConfigClockSource+0x172>
 8001a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa0:	d87f      	bhi.n	8001ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa2:	2b70      	cmp	r3, #112	; 0x70
 8001aa4:	d01a      	beq.n	8001adc <HAL_TIM_ConfigClockSource+0xa6>
 8001aa6:	2b70      	cmp	r3, #112	; 0x70
 8001aa8:	d87b      	bhi.n	8001ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8001aaa:	2b60      	cmp	r3, #96	; 0x60
 8001aac:	d050      	beq.n	8001b50 <HAL_TIM_ConfigClockSource+0x11a>
 8001aae:	2b60      	cmp	r3, #96	; 0x60
 8001ab0:	d877      	bhi.n	8001ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab2:	2b50      	cmp	r3, #80	; 0x50
 8001ab4:	d03c      	beq.n	8001b30 <HAL_TIM_ConfigClockSource+0xfa>
 8001ab6:	2b50      	cmp	r3, #80	; 0x50
 8001ab8:	d873      	bhi.n	8001ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8001aba:	2b40      	cmp	r3, #64	; 0x40
 8001abc:	d058      	beq.n	8001b70 <HAL_TIM_ConfigClockSource+0x13a>
 8001abe:	2b40      	cmp	r3, #64	; 0x40
 8001ac0:	d86f      	bhi.n	8001ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8001ac2:	2b30      	cmp	r3, #48	; 0x30
 8001ac4:	d064      	beq.n	8001b90 <HAL_TIM_ConfigClockSource+0x15a>
 8001ac6:	2b30      	cmp	r3, #48	; 0x30
 8001ac8:	d86b      	bhi.n	8001ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d060      	beq.n	8001b90 <HAL_TIM_ConfigClockSource+0x15a>
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d867      	bhi.n	8001ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d05c      	beq.n	8001b90 <HAL_TIM_ConfigClockSource+0x15a>
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d05a      	beq.n	8001b90 <HAL_TIM_ConfigClockSource+0x15a>
 8001ada:	e062      	b.n	8001ba2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f000 f969 	bl	8001dc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001afe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	609a      	str	r2, [r3, #8]
      break;
 8001b08:	e04f      	b.n	8001baa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6899      	ldr	r1, [r3, #8]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f000 f952 	bl	8001dc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b2c:	609a      	str	r2, [r3, #8]
      break;
 8001b2e:	e03c      	b.n	8001baa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f000 f8c9 	bl	8001cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2150      	movs	r1, #80	; 0x50
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f920 	bl	8001d8e <TIM_ITRx_SetConfig>
      break;
 8001b4e:	e02c      	b.n	8001baa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f000 f8e7 	bl	8001d30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2160      	movs	r1, #96	; 0x60
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f910 	bl	8001d8e <TIM_ITRx_SetConfig>
      break;
 8001b6e:	e01c      	b.n	8001baa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f000 f8a9 	bl	8001cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f900 	bl	8001d8e <TIM_ITRx_SetConfig>
      break;
 8001b8e:	e00c      	b.n	8001baa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f000 f8f7 	bl	8001d8e <TIM_ITRx_SetConfig>
      break;
 8001ba0:	e003      	b.n	8001baa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba6:	e000      	b.n	8001baa <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ba8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a2b      	ldr	r2, [pc, #172]	; (8001ccc <TIM_Base_SetConfig+0xc0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <TIM_Base_SetConfig+0x28>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2a:	d003      	beq.n	8001c34 <TIM_Base_SetConfig+0x28>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <TIM_Base_SetConfig+0xc4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d108      	bne.n	8001c46 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <TIM_Base_SetConfig+0xc0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <TIM_Base_SetConfig+0x52>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c54:	d003      	beq.n	8001c5e <TIM_Base_SetConfig+0x52>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <TIM_Base_SetConfig+0xc4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d108      	bne.n	8001c70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <TIM_Base_SetConfig+0xc0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d103      	bne.n	8001ca4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f023 0201 	bic.w	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	611a      	str	r2, [r3, #16]
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40000400 	.word	0x40000400

08001cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	f023 0201 	bic.w	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f023 030a 	bic.w	r3, r3, #10
 8001d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	621a      	str	r2, [r3, #32]
}
 8001d26:	bf00      	nop
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	f023 0210 	bic.w	r2, r3, #16
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	031b      	lsls	r3, r3, #12
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	621a      	str	r2, [r3, #32]
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f043 0307 	orr.w	r3, r3, #7
 8001db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	609a      	str	r2, [r3, #8]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b087      	sub	sp, #28
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ddc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	021a      	lsls	r2, r3, #8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	609a      	str	r2, [r3, #8]
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e041      	b.n	8001e9c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e64:	d004      	beq.n	8001e70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d10c      	bne.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40000400 	.word	0x40000400

08001eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e042      	b.n	8001f6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fbc6 	bl	800068c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	; 0x24
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fdb7 	bl	8002a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d175      	bne.n	8002080 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_UART_Transmit+0x2c>
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e06e      	b.n	8002082 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fc7d 	bl	80008b0 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_UART_Transmit+0x6c>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e003      	b.n	8001fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fe8:	e02e      	b.n	8002048 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fb1c 	bl	8002632 <UART_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e03a      	b.n	8002082 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10b      	bne.n	800202a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	3302      	adds	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e007      	b.n	800203a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	3301      	adds	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1cb      	bne.n	8001fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fae8 	bl	8002632 <UART_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	4613      	mov	r3, r2
 8002096:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d112      	bne.n	80020ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_UART_Receive_IT+0x26>
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e00b      	b.n	80020cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	461a      	mov	r2, r3
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fb0f 	bl	80026e4 <UART_Start_Receive_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	e000      	b.n	80020cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80020ca:	2302      	movs	r3, #2
  }
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0ba      	sub	sp, #232	; 0xe8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800211a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_UART_IRQHandler+0x66>
 8002126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fbec 	bl	8002910 <UART_Receive_IT>
      return;
 8002138:	e25b      	b.n	80025f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800213a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80de 	beq.w	8002300 <HAL_UART_IRQHandler+0x22c>
 8002144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d106      	bne.n	800215e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002154:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80d1 	beq.w	8002300 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_UART_IRQHandler+0xae>
 800216a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_UART_IRQHandler+0xd2>
 800218e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f043 0202 	orr.w	r2, r3, #2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_UART_IRQHandler+0xf6>
 80021b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f043 0204 	orr.w	r2, r3, #4
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d011      	beq.n	80021fa <HAL_UART_IRQHandler+0x126>
 80021d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80021e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f043 0208 	orr.w	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 81f2 	beq.w	80025e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_UART_IRQHandler+0x14e>
 8002210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fb77 	bl	8002910 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d103      	bne.n	800224e <HAL_UART_IRQHandler+0x17a>
 8002246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d04f      	beq.n	80022ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fa81 	bl	8002756 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d041      	beq.n	80022e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3314      	adds	r3, #20
 8002268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002270:	e853 3f00 	ldrex	r3, [r3]
 8002274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800227c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3314      	adds	r3, #20
 800228a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800228e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800229a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800229e:	e841 2300 	strex	r3, r2, [r1]
 80022a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80022a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1d9      	bne.n	8002262 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d013      	beq.n	80022de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	4a7e      	ldr	r2, [pc, #504]	; (80024b4 <HAL_UART_IRQHandler+0x3e0>)
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fc46 	bl	8000b54 <HAL_DMA_Abort_IT>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022d8:	4610      	mov	r0, r2
 80022da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022dc:	e00e      	b.n	80022fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f993 	bl	800260a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e4:	e00a      	b.n	80022fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f98f 	bl	800260a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ec:	e006      	b.n	80022fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f98b 	bl	800260a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80022fa:	e175      	b.n	80025e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	bf00      	nop
    return;
 80022fe:	e173      	b.n	80025e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 814f 	bne.w	80025a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800230a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8148 	beq.w	80025a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8141 	beq.w	80025a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80b6 	beq.w	80024b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002358:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8145 	beq.w	80025ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800236a:	429a      	cmp	r2, r3
 800236c:	f080 813e 	bcs.w	80025ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002376:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b20      	cmp	r3, #32
 8002380:	f000 8088 	beq.w	8002494 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002392:	e853 3f00 	ldrex	r3, [r3]
 8002396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800239a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800239e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80023b0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80023bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023c0:	e841 2300 	strex	r3, r2, [r1]
 80023c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80023c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1d9      	bne.n	8002384 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3314      	adds	r3, #20
 80023d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023da:	e853 3f00 	ldrex	r3, [r3]
 80023de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80023e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80023f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80023fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002400:	e841 2300 	strex	r3, r2, [r1]
 8002404:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e1      	bne.n	80023d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3314      	adds	r3, #20
 8002412:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002416:	e853 3f00 	ldrex	r3, [r3]
 800241a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800241c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800241e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002430:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002432:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002434:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002436:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002438:	e841 2300 	strex	r3, r2, [r1]
 800243c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800243e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e3      	bne.n	800240c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	330c      	adds	r3, #12
 8002458:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245c:	e853 3f00 	ldrex	r3, [r3]
 8002460:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002464:	f023 0310 	bic.w	r3, r3, #16
 8002468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002476:	65ba      	str	r2, [r7, #88]	; 0x58
 8002478:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800247c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800247e:	e841 2300 	strex	r3, r2, [r1]
 8002482:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e3      	bne.n	8002452 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fb25 	bl	8000ade <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8b6 	bl	800261c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024b0:	e09c      	b.n	80025ec <HAL_UART_IRQHandler+0x518>
 80024b2:	bf00      	nop
 80024b4:	0800281b 	.word	0x0800281b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 808e 	beq.w	80025f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80024d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8089 	beq.w	80025f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	330c      	adds	r3, #12
 80024e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e8:	e853 3f00 	ldrex	r3, [r3]
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80024ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	330c      	adds	r3, #12
 80024fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002502:	647a      	str	r2, [r7, #68]	; 0x44
 8002504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e3      	bne.n	80024de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	623b      	str	r3, [r7, #32]
   return(result);
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3314      	adds	r3, #20
 8002536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800253a:	633a      	str	r2, [r7, #48]	; 0x30
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e3      	bne.n	8002516 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	e853 3f00 	ldrex	r3, [r3]
 800256a:	60fb      	str	r3, [r7, #12]
   return(result);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0310 	bic.w	r3, r3, #16
 8002572:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	330c      	adds	r3, #12
 800257c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002580:	61fa      	str	r2, [r7, #28]
 8002582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002584:	69b9      	ldr	r1, [r7, #24]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	e841 2300 	strex	r3, r2, [r1]
 800258c:	617b      	str	r3, [r7, #20]
   return(result);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e3      	bne.n	800255c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800259a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f83b 	bl	800261c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025a6:	e023      	b.n	80025f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_UART_IRQHandler+0x4f4>
 80025b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f93e 	bl	8002842 <UART_Transmit_IT>
    return;
 80025c6:	e014      	b.n	80025f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00e      	beq.n	80025f2 <HAL_UART_IRQHandler+0x51e>
 80025d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f97d 	bl	80028e0 <UART_EndTransmit_IT>
    return;
 80025e6:	e004      	b.n	80025f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80025e8:	bf00      	nop
 80025ea:	e002      	b.n	80025f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80025ec:	bf00      	nop
 80025ee:	e000      	b.n	80025f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80025f0:	bf00      	nop
  }
}
 80025f2:	37e8      	adds	r7, #232	; 0xe8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002642:	e03b      	b.n	80026bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d037      	beq.n	80026bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264c:	f7fe f930 	bl	80008b0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	6a3a      	ldr	r2, [r7, #32]
 8002658:	429a      	cmp	r2, r3
 800265a:	d302      	bcc.n	8002662 <UART_WaitOnFlagUntilTimeout+0x30>
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e03a      	b.n	80026dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d023      	beq.n	80026bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d020      	beq.n	80026bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d01d      	beq.n	80026bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b08      	cmp	r3, #8
 800268c:	d116      	bne.n	80026bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f856 	bl	8002756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2208      	movs	r2, #8
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e00f      	b.n	80026dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4013      	ands	r3, r2
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d0b4      	beq.n	8002644 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	88fa      	ldrh	r2, [r7, #6]
 8002702:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2222      	movs	r2, #34	; 0x22
 800270e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002728:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0220 	orr.w	r2, r2, #32
 8002748:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002756:	b480      	push	{r7}
 8002758:	b095      	sub	sp, #84	; 0x54
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	e853 3f00 	ldrex	r3, [r3]
 800276c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	330c      	adds	r3, #12
 800277c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800277e:	643a      	str	r2, [r7, #64]	; 0x40
 8002780:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002786:	e841 2300 	strex	r3, r2, [r1]
 800278a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e5      	bne.n	800275e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3314      	adds	r3, #20
 8002798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	e853 3f00 	ldrex	r3, [r3]
 80027a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3314      	adds	r3, #20
 80027b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e5      	bne.n	8002792 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d119      	bne.n	8002802 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f023 0310 	bic.w	r3, r3, #16
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	330c      	adds	r3, #12
 80027ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027ee:	61ba      	str	r2, [r7, #24]
 80027f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	6979      	ldr	r1, [r7, #20]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	613b      	str	r3, [r7, #16]
   return(result);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e5      	bne.n	80027ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002810:	bf00      	nop
 8002812:	3754      	adds	r7, #84	; 0x54
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff fee8 	bl	800260a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b21      	cmp	r3, #33	; 0x21
 8002854:	d13e      	bne.n	80028d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285e:	d114      	bne.n	800288a <UART_Transmit_IT+0x48>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d110      	bne.n	800288a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	621a      	str	r2, [r3, #32]
 8002888:	e008      	b.n	800289c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	1c59      	adds	r1, r3, #1
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6211      	str	r1, [r2, #32]
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4619      	mov	r1, r3
 80028aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10f      	bne.n	80028d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e000      	b.n	80028d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
  }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fe79 	bl	80025f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b22      	cmp	r3, #34	; 0x22
 8002922:	f040 80ae 	bne.w	8002a82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292e:	d117      	bne.n	8002960 <UART_Receive_IT+0x50>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	b29a      	uxth	r2, r3
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	1c9a      	adds	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
 800295e:	e026      	b.n	80029ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	d007      	beq.n	8002984 <UART_Receive_IT+0x74>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <UART_Receive_IT+0x82>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	701a      	strb	r2, [r3, #0]
 8002990:	e008      	b.n	80029a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4619      	mov	r1, r3
 80029bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d15d      	bne.n	8002a7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0220 	bic.w	r2, r2, #32
 80029d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d135      	bne.n	8002a74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	e853 3f00 	ldrex	r3, [r3]
 8002a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f023 0310 	bic.w	r3, r3, #16
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2e:	623a      	str	r2, [r7, #32]
 8002a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a32:	69f9      	ldr	r1, [r7, #28]
 8002a34:	6a3a      	ldr	r2, [r7, #32]
 8002a36:	e841 2300 	strex	r3, r2, [r1]
 8002a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1e5      	bne.n	8002a0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d10a      	bne.n	8002a66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fdd5 	bl	800261c <HAL_UARTEx_RxEventCallback>
 8002a72:	e002      	b.n	8002a7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7fd fc73 	bl	8000360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e002      	b.n	8002a84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e000      	b.n	8002a84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
  }
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3730      	adds	r7, #48	; 0x30
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ac6:	f023 030c 	bic.w	r3, r3, #12
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <UART_SetConfig+0x114>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d103      	bne.n	8002afc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002af4:	f7fe fe2e 	bl	8001754 <HAL_RCC_GetPCLK2Freq>
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	e002      	b.n	8002b02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002afc:	f7fe fe16 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 8002b00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	009a      	lsls	r2, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <UART_SetConfig+0x118>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	0119      	lsls	r1, r3, #4
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	441a      	add	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <UART_SetConfig+0x118>)
 8002b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2064      	movs	r0, #100	; 0x64
 8002b42:	fb00 f303 	mul.w	r3, r0, r3
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	3332      	adds	r3, #50	; 0x32
 8002b4c:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <UART_SetConfig+0x118>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b58:	4419      	add	r1, r3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009a      	lsls	r2, r3, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <UART_SetConfig+0x118>)
 8002b72:	fba3 0302 	umull	r0, r3, r3, r2
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2064      	movs	r0, #100	; 0x64
 8002b7a:	fb00 f303 	mul.w	r3, r0, r3
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	3332      	adds	r3, #50	; 0x32
 8002b84:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <UART_SetConfig+0x118>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	f003 020f 	and.w	r2, r3, #15
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	440a      	add	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	51eb851f 	.word	0x51eb851f

08002ba8 <__libc_init_array>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	2600      	movs	r6, #0
 8002bac:	4d0c      	ldr	r5, [pc, #48]	; (8002be0 <__libc_init_array+0x38>)
 8002bae:	4c0d      	ldr	r4, [pc, #52]	; (8002be4 <__libc_init_array+0x3c>)
 8002bb0:	1b64      	subs	r4, r4, r5
 8002bb2:	10a4      	asrs	r4, r4, #2
 8002bb4:	42a6      	cmp	r6, r4
 8002bb6:	d109      	bne.n	8002bcc <__libc_init_array+0x24>
 8002bb8:	f000 f822 	bl	8002c00 <_init>
 8002bbc:	2600      	movs	r6, #0
 8002bbe:	4d0a      	ldr	r5, [pc, #40]	; (8002be8 <__libc_init_array+0x40>)
 8002bc0:	4c0a      	ldr	r4, [pc, #40]	; (8002bec <__libc_init_array+0x44>)
 8002bc2:	1b64      	subs	r4, r4, r5
 8002bc4:	10a4      	asrs	r4, r4, #2
 8002bc6:	42a6      	cmp	r6, r4
 8002bc8:	d105      	bne.n	8002bd6 <__libc_init_array+0x2e>
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd0:	4798      	blx	r3
 8002bd2:	3601      	adds	r6, #1
 8002bd4:	e7ee      	b.n	8002bb4 <__libc_init_array+0xc>
 8002bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bda:	4798      	blx	r3
 8002bdc:	3601      	adds	r6, #1
 8002bde:	e7f2      	b.n	8002bc6 <__libc_init_array+0x1e>
 8002be0:	08002c54 	.word	0x08002c54
 8002be4:	08002c54 	.word	0x08002c54
 8002be8:	08002c54 	.word	0x08002c54
 8002bec:	08002c58 	.word	0x08002c58

08002bf0 <memset>:
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4402      	add	r2, r0
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <memset+0xa>
 8002bf8:	4770      	bx	lr
 8002bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfe:	e7f9      	b.n	8002bf4 <memset+0x4>

08002c00 <_init>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	bf00      	nop
 8002c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c06:	bc08      	pop	{r3}
 8002c08:	469e      	mov	lr, r3
 8002c0a:	4770      	bx	lr

08002c0c <_fini>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	bf00      	nop
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr
